%%% File    : xpath_error.erl
%%% Author  :  <thomasl@metis.tail-f.com>
%%% Description :
%%% Created : 19 Jun 2006 by  <thomasl@metis.tail-f.com>
%%
%% Pretty-printing of XPath errors.
%%  XPath errors are normally generated by ?xp_exit, defined in
%% util/include/xpath_macro.hrl. Unstructured errors (unknown caught
%% exceptions) can also occur.
%%

-module(xpath_error).
-export([strerror/1]).

-define(s2l(Str), if is_atom(Str) -> atom_to_list(Str);
                     is_binary(Str) -> binary_to_list(Str);
                     is_list(Str) -> Str
                  end).

%% *** UNFINISHED ***
%% - Some (or all) should be wrapped with io_lib:format
%% - Some or all should have extra args for more details
%% - "I: ..." denotes an 'internal error'
%%   (not the same thing as an implementation restriction or -limitation)

%%% Compiling
strerror({xpath_scan, {invalid_axis, Axis, _}}) ->
    "Invalid axis: " ++ Axis;
strerror({xpath_scan, {invalid_name, Str}}) ->
    "Invalid name: " ++ Str;
strerror({xpath_scan, {eof_in_quote, QuoteChar, Str}}) ->
    "Missing end quote " ++ [QuoteChar] ++
        " while scanning: " ++ [QuoteChar|Str];
strerror({xpath_scan, _Rsn}) ->
    %% this is a catchall error when xpath_scan dies; the reason can
    %% be a raw exception, so it is not shown
    "XPath syntax error";
strerror({Line, xpath_parse, _Rsn}) when is_integer(Line) ->
    "XPath syntax error";
strerror({not_a_path_expression, _M, _L, _Query}) ->
    "XPath query is not a path expression";
strerror({loc_step_predicates_fail, _M, _L, _Rsn}) ->
    "Predicates of location step will always fail";
strerror({internal_error, _M, _L, _Err}) ->
    "Internal error";
strerror({axis_not_permitted, _M, _L, Axis}) ->
    "Axis '" ++ ?s2l(Axis) ++ "' not supported";
strerror({tag_not_in_any_schema, _M, _L, Tag_str}) ->
    "Tag not found in any namespace schema: " ++ Tag_str;
strerror({attribute_does_not_exist, _M, _L, Attr_str}) ->
    "Attribute not found in any namespace schema: " ++ Attr_str;
strerror({invalid_namespace, _M, _L, Ns}) ->
    "Invalid namespace: " ++ ?s2l(Ns);
strerror({invalid_namespace_prefix, _M, _L, NSPrefix}) ->
    "Invalid namespace prefix: " ++ ?s2l(NSPrefix);
strerror({undefined_function, _M, _L, {F, A}}) ->
    "Undefined function " ++ ?s2l(F) ++ "/" ++ integer_to_list(A);
strerror({invalid_bif_arity, _M, _L, {Bif, N}}) ->
    "Function " ++ ?s2l(Bif) ++
        "() can not be called with " ++ integer_to_list(N) ++
        " argument" ++ if N /= 1 -> "s"; true -> "" end;
strerror({bad_arg, _M, _L, {F, Type}}) ->
    "Argument to " ++ ?s2l(F) ++ "() could not be converted to type "
        ++ ?s2l(Type);
strerror({invalid_sort_order_expr, _M, _L, _Rsn}) ->
    %% FIXME better error indication
    "Invalid sort order expression";
strerror({invalid_expr, _M, _L, _Rsn}) ->
    %% unspecified error
    "Invalid XPath expression";

%%% Runtime or rewrite
strerror({unknown_node_test, _M, _L, _Rsn}) ->
    "Unknown node test";
%%% Runtime or schema
strerror({nyi, M, L, _}) ->
    io_lib:format("Not yet implemented (~p, line ~p)", [M, L]);
strerror({nyi2, _M, _L, Str}) ->
    io_lib:format("Not yet implemented - ~s", [Str]);

%%% Run-time
strerror({invalid_xpath_path, _M, _L, _Rsn}) ->
    "Invalid XPath path";
strerror({invalid_xpath_path_function, _M, _L, Rsn}) ->
    "Invalid XPath path: function " ++ Rsn ++ "not allowed";
strerror({unknown_xpath_axis, _M, _L, Axis}) ->
    "Unknown XPath axis: " ++ ?s2l(Axis);
strerror({i_bad_data, _M, _L, _Rsn}) ->
    "I: Bad data";
strerror({variable_unbound, _M, _L, VarName}) ->
    "XPath variable $" ++  VarName ++ " unbound";
strerror({unknown_predicate, _M, _L, _Rsn}) ->
    "Unknown predicate";
strerror({i_bad_lookup_key, _M, _L, _Rsn}) ->
    "I: Bad lookup key";
strerror({i_direct_child_on_non_element, _M, _L, _Ctx}) ->
    "I: Child axis selected on non-element node";
strerror({i_bad_toplevel, _M, _L, _Rsn}) ->
    "I: Bad toplevel";
strerror({not_supported, _M, _L, Axis}) ->
    lists:flatten(io_lib:format("Axis not supported: ~w", [Axis]));
strerror({aborted, _M, _L, _Rsn}) ->
    "Query aborted";
strerror({i_unknown_xpath_function, _M, _L, _Rsn}) ->
    %% should be caught earlier
    "I: Unknown XPath builtin function";
strerror({i_unknown_comparison_operator, _M, _L, _Rsn}) ->
    "I: Unknown comparison operator";
strerror({i_unknown_xpath_type, _M, _L, _Rsn}) ->
    "I: Value has unknown XPath type";
strerror({i_unable_to_convert_to_number, _M, _L, _Rsn}) ->
    "I: Unable to convert to number";
strerror({i_parent_of_expression_context, _M, _L, _Ctx}) ->
    "I: Used parent-axis on internal evaluation context";

strerror(_Rsn) ->
    "Unknown XPath error.".

